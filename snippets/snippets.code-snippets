/*
 *   Copyright (C) 2020 K.M Ahnaf Zamil
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

{
  "Hikari client": {
    "prefix": "bot",
    "body": [
      "import hikari",
      "",
      "bot = hikari.BotApp(token=\"${1:put your token here}\")",
      "",
      "",
      "@bot.listen()",
      "async def ping(event: hikari.GuildMessageCreateEvent) -> None:",
      "    if event.is_bot or not event.content:",
      "        return",
      "",
      "    if event.content.startswith(\"!ping\"):",
      "        await event.message.reply(\"Pong!\")",
      "",
      "",
      "bot.run()"
    ],
    "description": "Hikari client"
  },
  "Lightbulb bot": {
    "prefix": "bot",
    "body": [
      "import lightbulb",
      "",
      "bot = lightbulb.Bot(token=\"${1:put your token here}\", prefix=\"put your prefix here\")",
      "",
      "",
      "@bot.command()",
      "async def ping(ctx: lightbulb.Context) -> None:",
      "    await ctx.reply(\"Pong!\")",
      "",
      "",
      "bot.run()"
    ],
    "description": "Lightbulb bot"
  },
  "Hikari listener": {
    "prefix": "listen",
    "body": [
      "@bot.listen()",
      "async def ping(event: ${1:hikari.GuildMessageCreateEvent}) -> None:",
      "    if event.content.startswith(\"!ping\"):",
      "        await event.message.reply(\"Pong!\")",
      ""
    ],
    "description": "Hikari event listener"
  },
  "Lightbulb Plugin": {
    "prefix": "plugin",
    "body": [
      "class ${1:MyPlugin}(lightbulb.Plugin):",
      "    def __init__(self, bot: lightbulb.Bot) -> None:",
      "        super().__init__()",
      "        self.bot = bot",
      "",
      "",
      "    @lightbulb.command()",
      "    async def ping(self, ctx: lightbulb.Context):",
      "        await ctx.send(\"Pong!\")",
      "",
      "",
      "bot.add_plugin(${1:MyPlugin}())"
    ],
    "description": "Lightbulb plugin/extension"
  },
  "Lightbulb listener": {
    "prefix": "listen",
    "body": [
      "@lightbulb.listener(${1:hikari.GuildMessageCreateEvent})",
      "async def on_message(self, event: ${1:hikari.GuildMessageCreateEvent}) -> None:",
      "    if event.content.startswith(\"!ping\"):",
      "        await event.message.reply(\"Pong!\")",
      ""
    ],
    "description": "Lightbulb event listener"
  },
  "Lightbulb command": {
    "prefix": "command",
    "body": [
      "@lightbulb.command()",
      "async def ${1:ping}(self, ctx: lightbulb.Context) -> None:",
      "    await ctx.reply(\"Pong!\")",
      ""
    ],
    "description": "Lightbulb command"
  }
}
